# Nom pour le workflow
name: Build Spring App

# Declencher workflow lors du push d'application
on: 
    push:
        branches: [main,dev]
        tags:
          - 'v*'
            
jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            # Etape 1 : cherchez dans le marketplace l'action pour configurer le jdk
            - name: Set up jdk 17
              uses: actions/setup-java@v4
              with:
                distribution: 'temurin' # See 'Supported distributions' for available options
                java-version: '17'

            # Etape 2 : Récupération du projet
            - name: Checkoutproject
              uses: actions/checkout@v4


            - name: Make cache
              uses: actions/cache@v4
              with:
                path: ~/.m2/repository # telecharge en local et la met en local... on voit toutes les bibliotheques (liées aux dependances que j'ai dans mon projet) telechargées reactive-steams => Là où se met tout les externals library.
                key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }} # Key : "tu me retelecharges toutes les dependances si le pom.xml a le moindre changement"
                restore-keys: ${{ runner.os }}-maven- # On retrouve les caches dans github -> actions -> management "Caches"

            
            # Etape 3 : Installation dependance
            - name: Install dependencies
              run: mvn dependency:resolve
            
            # Etape 4 : Application, mise en place jdk
            - name: Build application
              run: mvn clean package



            - name: Upload artefact
              if: success() && github.ref == 'refs/heads/main'
              uses: actions/upload-artifact@v4
              with:
                name: build_app
                path: target/*.jar
                # Eviter de double cliquer car ca rendra difficile de l'eteindre à part le redemarrer, pour lancer l'appli .jar depuis le terminal =>
                # java -jar [nom du fichier .jar] 
            



    

